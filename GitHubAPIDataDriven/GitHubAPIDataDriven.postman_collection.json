{
	"info": {
		"_postman_id": "64768612-4451-49c6-a416-6c2c541c73ba",
		"name": "GitHubAPIDataDriven",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37066334"
	},
	"item": [
		{
			"name": "Creation of Access Token using OAuth Authorization Copy",
			"item": [
				{
					"name": "Get Authorization Code (OAuth)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{urlGitHub}}login/oauth/authorize?client_id={{client_id}}&redirect_uri=http://localhost:3000/callback&scope=public_repo, repo, delete_repo",
							"host": [
								"{{urlGitHub}}login"
							],
							"path": [
								"oauth",
								"authorize"
							],
							"query": [
								{
									"key": "client_id",
									"value": "{{client_id}}"
								},
								{
									"key": "redirect_uri",
									"value": "http://localhost:3000/callback"
								},
								{
									"key": "scope",
									"value": "public_repo, repo, delete_repo"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Access Token",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{urlGitHub}}login/oauth/access_token?client_id={{client_id}}&client_secret={{client_secret}}&code={{code}}",
							"host": [
								"{{urlGitHub}}login"
							],
							"path": [
								"oauth",
								"access_token"
							],
							"query": [
								{
									"key": "client_id",
									"value": "{{client_id}}"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}"
								},
								{
									"key": "code",
									"value": "{{code}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create a repository for the authenticated user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 201 Created\", () => {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response is in JSON format\", () => {",
							"    pm.response.to.have.json;",
							"});",
							"",
							"pm.test(\"Content-Type is present\", () => {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Content-Type is 'application/json; charset=utf-8'\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"Response time is less than 3000ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});",
							"",
							"pm.test(\"Response contains correct name for each field\", () => {",
							"    pm.expect(jsonData).to.have.property(\"id\");",
							"    pm.expect(jsonData).to.have.property(\"full_name\");",
							"    pm.expect(jsonData).to.have.property(\"owner\");",
							"    pm.expect(jsonData.owner).to.have.property(\"login\");",
							"    pm.expect(jsonData.owner).to.have.property(\"id\");",
							"});",
							"",
							"pm.test(\"Response contains correct types of data for each field\", () => {",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"    pm.expect(jsonData.id).to.be.a(\"number\");",
							"    pm.expect(jsonData.full_name).to.be.a(\"string\");",
							"    pm.expect(jsonData.owner).to.be.an(\"object\");",
							"    pm.expect(jsonData.owner.login).to.be.a(\"string\");",
							"    pm.expect(jsonData.owner.id).to.be.a(\"number\");",
							"});",
							"",
							"pm.test(\"Request payload contains the correct data\", () => {",
							"    let actualRequest = JSON.parse(pm.request.body.raw);",
							"",
							"    let expectedRequest = {",
							"        \"name\": pm.collectionVariables.get(\"repo\"),",
							"        \"description\": \"This repository contains API tests for CRUD operations on repositories, using the GitHub API in Postman.\",",
							"        \"homepage\": \"https://github.com\",",
							"        \"private\": false,",
							"        \"is_template\": true",
							"    };",
							"",
							"    pm.expect(actualRequest.name).to.eql(expectedRequest.name);",
							"    pm.expect(actualRequest.description).to.eql(expectedRequest.description);",
							"    pm.expect(actualRequest.homepage).to.eql(expectedRequest.homepage);",
							"    pm.expect(actualRequest.private).to.eql(expectedRequest.private);",
							"    pm.expect(actualRequest.is_template).to.eql(expectedRequest.is_template);",
							"",
							"});",
							"",
							"// create collection variables after getting response body",
							"pm.collectionVariables.set(\"repo\", jsonData.name);",
							"pm.collectionVariables.set(\"id\", jsonData.id);",
							"pm.collectionVariables.set(\"full_name\", jsonData.full_name);",
							"pm.collectionVariables.set(\"owner\", jsonData.owner.login);",
							"pm.collectionVariables.set(\"owner_id\", jsonData.owner.id);",
							"",
							"pm.test(\"Response contains the correct value for each field\", () => {",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"id\"));",
							"    pm.expect(jsonData.full_name).to.eql(pm.collectionVariables.get(\"full_name\"));",
							"    pm.expect(jsonData.owner.login).to.eql(pm.collectionVariables.get(\"owner\"));",
							"    pm.expect(jsonData.owner.id).to.eql(pm.collectionVariables.get(\"owner_id\"));  ",
							"});",
							"",
							"pm.test(\"API returns the correct version\", () => {",
							"    // console.log(pm.response.headers.toObject());",
							"    let apiVersion = pm.response.headers.get(\"x-github-api-version-selected\");",
							"    let expectedVersion = \"2022-11-28\"; ",
							"    pm.expect(apiVersion).to.eql(expectedVersion);",
							"});",
							"",
							"// pm.test(\"Verify '_octo' cookie exists\", () => {",
							"//     let cookieOcto = pm.cookies.get(\"_octo\")",
							"//     pm.expect(cookieOcto).to.not.be.undefined;",
							"//     pm.expect(cookieOcto).to.eql(\"GH1.1.1625141523.1734076530\");",
							"// });",
							"",
							"pm.test(\"Verify 'logged_in' cookie exists\", () => {",
							"    let cookieOcto = pm.cookies.get(\"logged_in\")",
							"    pm.expect(cookieOcto).to.not.be.undefined;",
							"    pm.expect(cookieOcto).to.eql(\"no\");",
							"});",
							"",
							"pm.test(\"Verify POST request method\", () => {",
							"    let method = pm.request.method;",
							"    pm.expect(method).to.eql(\"POST\");",
							"});",
							"",
							"pm.test(\"Verify the base URL\", () => {",
							"    let baseUrl = pm.request.url.toString();",
							"    pm.expect(baseUrl).to.have.string(\"https://api.github.com\");",
							"});",
							"",
							"pm.test(\"Verify request URL\", () => {",
							"    let url = pm.request.url.toString();",
							"    pm.expect(url).to.eql(\"https://api.github.com/user/repos\");",
							"});",
							"",
							"// const jsonSchema = {",
							"//   \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"//   \"type\": \"object\",",
							"//   \"properties\": {",
							"//     \"id\": {",
							"//       \"type\": \"integer\"",
							"//     },",
							"//     \"node_id\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"name\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"full_name\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"private\": {",
							"//       \"type\": \"boolean\"",
							"//     },",
							"//     \"owner\": {",
							"//       \"type\": \"object\",",
							"//       \"properties\": {",
							"//         \"login\": {",
							"//           \"type\": \"string\"",
							"//         },",
							"//         \"id\": {",
							"//           \"type\": \"integer\"",
							"//         },",
							"//         \"node_id\": {",
							"//           \"type\": \"string\"",
							"//         },",
							"//         \"avatar_url\": {",
							"//           \"type\": \"string\"",
							"//         },",
							"//         \"gravatar_id\": {",
							"//           \"type\": \"string\"",
							"//         },",
							"//         \"url\": {",
							"//           \"type\": \"string\"",
							"//         },",
							"//         \"html_url\": {",
							"//           \"type\": \"string\"",
							"//         },",
							"//         \"followers_url\": {",
							"//           \"type\": \"string\"",
							"//         },",
							"//         \"following_url\": {",
							"//           \"type\": \"string\"",
							"//         },",
							"//         \"gists_url\": {",
							"//           \"type\": \"string\"",
							"//         },",
							"//         \"starred_url\": {",
							"//           \"type\": \"string\"",
							"//         },",
							"//         \"subscriptions_url\": {",
							"//           \"type\": \"string\"",
							"//         },",
							"//         \"organizations_url\": {",
							"//           \"type\": \"string\"",
							"//         },",
							"//         \"repos_url\": {",
							"//           \"type\": \"string\"",
							"//         },",
							"//         \"events_url\": {",
							"//           \"type\": \"string\"",
							"//         },",
							"//         \"received_events_url\": {",
							"//           \"type\": \"string\"",
							"//         },",
							"//         \"type\": {",
							"//           \"type\": \"string\"",
							"//         },",
							"//         \"user_view_type\": {",
							"//           \"type\": \"string\"",
							"//         },",
							"//         \"site_admin\": {",
							"//           \"type\": \"boolean\"",
							"//         }",
							"//       },",
							"//       \"required\": [",
							"//         \"login\",",
							"//         \"id\",",
							"//         \"node_id\",",
							"//         \"avatar_url\",",
							"//         \"gravatar_id\",",
							"//         \"url\",",
							"//         \"html_url\",",
							"//         \"followers_url\",",
							"//         \"following_url\",",
							"//         \"gists_url\",",
							"//         \"starred_url\",",
							"//         \"subscriptions_url\",",
							"//         \"organizations_url\",",
							"//         \"repos_url\",",
							"//         \"events_url\",",
							"//         \"received_events_url\",",
							"//         \"type\",",
							"//         \"user_view_type\",",
							"//         \"site_admin\"",
							"//       ]",
							"//     },",
							"//     \"html_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"description\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"fork\": {",
							"//       \"type\": \"boolean\"",
							"//     },",
							"//     \"url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"forks_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"keys_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"collaborators_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"teams_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"hooks_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"issue_events_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"events_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"assignees_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"branches_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"tags_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"blobs_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"git_tags_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"git_refs_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"trees_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"statuses_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"languages_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"stargazers_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"contributors_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"subscribers_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"subscription_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"commits_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"git_commits_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"comments_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"issue_comment_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"contents_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"compare_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"merges_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"archive_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"downloads_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"issues_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"pulls_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"milestones_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"notifications_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"labels_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"releases_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"deployments_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"created_at\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"updated_at\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"pushed_at\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"git_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"ssh_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"clone_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"svn_url\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"homepage\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"size\": {",
							"//       \"type\": \"integer\"",
							"//     },",
							"//     \"stargazers_count\": {",
							"//       \"type\": \"integer\"",
							"//     },",
							"//     \"watchers_count\": {",
							"//       \"type\": \"integer\"",
							"//     },",
							"//     \"language\": {",
							"//       \"type\": \"null\"",
							"//     },",
							"//     \"has_issues\": {",
							"//       \"type\": \"boolean\"",
							"//     },",
							"//     \"has_projects\": {",
							"//       \"type\": \"boolean\"",
							"//     },",
							"//     \"has_downloads\": {",
							"//       \"type\": \"boolean\"",
							"//     },",
							"//     \"has_wiki\": {",
							"//       \"type\": \"boolean\"",
							"//     },",
							"//     \"has_pages\": {",
							"//       \"type\": \"boolean\"",
							"//     },",
							"//     \"has_discussions\": {",
							"//       \"type\": \"boolean\"",
							"//     },",
							"//     \"forks_count\": {",
							"//       \"type\": \"integer\"",
							"//     },",
							"//     \"mirror_url\": {",
							"//       \"type\": \"null\"",
							"//     },",
							"//     \"archived\": {",
							"//       \"type\": \"boolean\"",
							"//     },",
							"//     \"disabled\": {",
							"//       \"type\": \"boolean\"",
							"//     },",
							"//     \"open_issues_count\": {",
							"//       \"type\": \"integer\"",
							"//     },",
							"//     \"license\": {",
							"//       \"type\": \"null\"",
							"//     },",
							"//     \"allow_forking\": {",
							"//       \"type\": \"boolean\"",
							"//     },",
							"//     \"is_template\": {",
							"//       \"type\": \"boolean\"",
							"//     },",
							"//     \"web_commit_signoff_required\": {",
							"//       \"type\": \"boolean\"",
							"//     },",
							"//     \"topics\": {",
							"//       \"type\": \"array\",",
							"//       \"items\": {}",
							"//     },",
							"//     \"visibility\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"forks\": {",
							"//       \"type\": \"integer\"",
							"//     },",
							"//     \"open_issues\": {",
							"//       \"type\": \"integer\"",
							"//     },",
							"//     \"watchers\": {",
							"//       \"type\": \"integer\"",
							"//     },",
							"//     \"default_branch\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"permissions\": {",
							"//       \"type\": \"object\",",
							"//       \"properties\": {",
							"//         \"admin\": {",
							"//           \"type\": \"boolean\"",
							"//         },",
							"//         \"maintain\": {",
							"//           \"type\": \"boolean\"",
							"//         },",
							"//         \"push\": {",
							"//           \"type\": \"boolean\"",
							"//         },",
							"//         \"triage\": {",
							"//           \"type\": \"boolean\"",
							"//         },",
							"//         \"pull\": {",
							"//           \"type\": \"boolean\"",
							"//         }",
							"//       },",
							"//       \"required\": [",
							"//         \"admin\",",
							"//         \"maintain\",",
							"//         \"push\",",
							"//         \"triage\",",
							"//         \"pull\"",
							"//       ]",
							"//     },",
							"//     \"allow_squash_merge\": {",
							"//       \"type\": \"boolean\"",
							"//     },",
							"//     \"allow_merge_commit\": {",
							"//       \"type\": \"boolean\"",
							"//     },",
							"//     \"allow_rebase_merge\": {",
							"//       \"type\": \"boolean\"",
							"//     },",
							"//     \"allow_auto_merge\": {",
							"//       \"type\": \"boolean\"",
							"//     },",
							"//     \"delete_branch_on_merge\": {",
							"//       \"type\": \"boolean\"",
							"//     },",
							"//     \"allow_update_branch\": {",
							"//       \"type\": \"boolean\"",
							"//     },",
							"//     \"use_squash_pr_title_as_default\": {",
							"//       \"type\": \"boolean\"",
							"//     },",
							"//     \"squash_merge_commit_message\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"squash_merge_commit_title\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"merge_commit_message\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"merge_commit_title\": {",
							"//       \"type\": \"string\"",
							"//     },",
							"//     \"network_count\": {",
							"//       \"type\": \"integer\"",
							"//     },",
							"//     \"subscribers_count\": {",
							"//       \"type\": \"integer\"",
							"//     }",
							"//   },",
							"//   \"required\": [",
							"//     \"id\",",
							"//     \"node_id\",",
							"//     \"name\",",
							"//     \"full_name\",",
							"//     \"private\",",
							"//     \"owner\",",
							"//     \"html_url\",",
							"//     \"description\",",
							"//     \"fork\",",
							"//     \"url\",",
							"//     \"forks_url\",",
							"//     \"keys_url\",",
							"//     \"collaborators_url\",",
							"//     \"teams_url\",",
							"//     \"hooks_url\",",
							"//     \"issue_events_url\",",
							"//     \"events_url\",",
							"//     \"assignees_url\",",
							"//     \"branches_url\",",
							"//     \"tags_url\",",
							"//     \"blobs_url\",",
							"//     \"git_tags_url\",",
							"//     \"git_refs_url\",",
							"//     \"trees_url\",",
							"//     \"statuses_url\",",
							"//     \"languages_url\",",
							"//     \"stargazers_url\",",
							"//     \"contributors_url\",",
							"//     \"subscribers_url\",",
							"//     \"subscription_url\",",
							"//     \"commits_url\",",
							"//     \"git_commits_url\",",
							"//     \"comments_url\",",
							"//     \"issue_comment_url\",",
							"//     \"contents_url\",",
							"//     \"compare_url\",",
							"//     \"merges_url\",",
							"//     \"archive_url\",",
							"//     \"downloads_url\",",
							"//     \"issues_url\",",
							"//     \"pulls_url\",",
							"//     \"milestones_url\",",
							"//     \"notifications_url\",",
							"//     \"labels_url\",",
							"//     \"releases_url\",",
							"//     \"deployments_url\",",
							"//     \"created_at\",",
							"//     \"updated_at\",",
							"//     \"pushed_at\",",
							"//     \"git_url\",",
							"//     \"ssh_url\",",
							"//     \"clone_url\",",
							"//     \"svn_url\",",
							"//     \"homepage\",",
							"//     \"size\",",
							"//     \"stargazers_count\",",
							"//     \"watchers_count\",",
							"//     \"language\",",
							"//     \"has_issues\",",
							"//     \"has_projects\",",
							"//     \"has_downloads\",",
							"//     \"has_wiki\",",
							"//     \"has_pages\",",
							"//     \"has_discussions\",",
							"//     \"forks_count\",",
							"//     \"mirror_url\",",
							"//     \"archived\",",
							"//     \"disabled\",",
							"//     \"open_issues_count\",",
							"//     \"license\",",
							"//     \"allow_forking\",",
							"//     \"is_template\",",
							"//     \"web_commit_signoff_required\",",
							"//     \"topics\",",
							"//     \"visibility\",",
							"//     \"forks\",",
							"//     \"open_issues\",",
							"//     \"watchers\",",
							"//     \"default_branch\",",
							"//     \"permissions\",",
							"//     \"allow_squash_merge\",",
							"//     \"allow_merge_commit\",",
							"//     \"allow_rebase_merge\",",
							"//     \"allow_auto_merge\",",
							"//     \"delete_branch_on_merge\",",
							"//     \"allow_update_branch\",",
							"//     \"use_squash_pr_title_as_default\",",
							"//     \"squash_merge_commit_message\",",
							"//     \"squash_merge_commit_title\",",
							"//     \"merge_commit_message\",",
							"//     \"merge_commit_title\",",
							"//     \"network_count\",",
							"//     \"subscribers_count\"",
							"//   ]",
							"// };",
							"",
							"// const Ajv = require('ajv');",
							"// const ajv = new Ajv();",
							"",
							"// let repoName = pm.iterationData.get(\"repoName\");",
							"// let dynamicSchema = JSON.parse(JSON.stringify(jsonSchema));",
							"",
							"// dynamicSchema.properties.name = { ",
							"//     const: repoName ",
							"// };",
							"",
							"// let validate = ajv.compile(dynamicSchema);",
							"// let valid = validate(jsonData);",
							"",
							"// pm.test(\"Response matches the schema with dynamic repoName\", () => {",
							"//     pm.expect(valid).to.be.true;",
							"//     // // Log validation errors, if any",
							"//     // if (!valid) {",
							"//     //     console.log(\"Schema validation errors:\", validate.errors);",
							"//     // }",
							"// });",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"repo\", pm.iterationData.get(\"repoName\"));",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "X-GitHub-Api-Version",
						"value": "2022-11-28",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/vnd.github.text-match+json",
						"type": "text"
					},
					{
						"key": "X-OAuth-Scopes",
						"value": "public_repo, repo",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{repoName}}\",\n    \"description\": \"This repository contains API tests for CRUD operations on repositories, using the GitHub API in Postman.\",\n    \"homepage\": \"https://github.com\",\n    \"private\": false,\n    \"is_template\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlApiGitHub}}user/repos",
					"host": [
						"{{urlApiGitHub}}user"
					],
					"path": [
						"repos"
					]
				}
			},
			"response": []
		},
		{
			"name": "List repositories for a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is in JSON format\", () => {",
							"    pm.response.to.have.json;",
							"});",
							"",
							"pm.test(\"Content-Type is present\", () => {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Content-Type is 'application/json; charset=utf-8'\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"Response time is less than 3000ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});",
							"",
							"pm.test(\"Response contains correct name for each field\", () => {",
							"    jsonData.forEach((field) => {",
							"        pm.expect(field).to.have.property(\"id\");",
							"        pm.expect(field).to.have.property(\"full_name\");",
							"        pm.expect(field).to.have.property(\"owner\");",
							"        pm.expect(field.owner).to.have.property(\"login\");",
							"        pm.expect(field.owner).to.have.property(\"id\");",
							"    });",
							"});",
							"",
							"pm.test(\"Response contains correct types of data for each field\", () => {",
							"    jsonData.forEach((field) => {",
							"        pm.expect(field).to.be.an(\"object\");",
							"        pm.expect(field.id).to.be.a(\"number\");",
							"        pm.expect(field.full_name).to.be.a(\"string\");",
							"        pm.expect(field.owner).to.be.an(\"object\");",
							"        pm.expect(field.owner.login).to.be.a(\"string\");",
							"        pm.expect(field.owner.id).to.be.a(\"number\");",
							"    });",
							"});",
							"",
							"pm.test(\"Response contains the correct value for each field\", () => {",
							"        jsonData.forEach((field, index) => {",
							"            if(index === 0) {",
							"                pm.expect(field.id).to.eql(pm.collectionVariables.get(\"id\"));",
							"                pm.expect(field.full_name).to.eql(pm.collectionVariables.get(\"full_name\"));",
							"                pm.expect(field.owner.login).to.eql(pm.collectionVariables.get(\"owner\"));",
							"                pm.expect(field.owner.id).to.eql(pm.collectionVariables.get(\"owner_id\"));",
							"            }",
							"        });    ",
							"});",
							"",
							"// pm.test(\"Verify '_octo' cookie exists\", () => {",
							"//     let cookieOcto = pm.cookies.get(\"_octo\")",
							"//     pm.expect(cookieOcto).to.not.be.undefined;",
							"//     pm.expect(cookieOcto).to.eql(\"GH1.1.1625141523.1734076530\");",
							"// });",
							"",
							"pm.test(\"Verify 'logged_in' cookie exists\", () => {",
							"    let cookieOcto = pm.cookies.get(\"logged_in\")",
							"    pm.expect(cookieOcto).to.not.be.undefined;",
							"    pm.expect(cookieOcto).to.eql(\"no\");",
							"});",
							"",
							"pm.test(\"Verify GET request method\", () => {",
							"    let method = pm.request.method;",
							"    pm.expect(method).to.eql(\"GET\");",
							"});",
							"",
							"pm.test(\"Verify the base URL\", () => {",
							"    let baseUrl = pm.request.url.toString();",
							"    pm.expect(baseUrl).to.have.string(\"https://api.github.com\");",
							"});",
							"",
							"pm.test(\"Verify request URL\", () => {",
							"    let actualUrl = pm.request.url.toString();",
							"    let expectedUrl = `${pm.collectionVariables.get(\"urlApiGitHub\")}users/${pm.collectionVariables.get(\"owner\")}/repos?sort=updated`;",
							"    pm.expect(actualUrl).to.eql(expectedUrl);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "X-GitHub-Api-Version",
						"value": "2022-11-28",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/vnd.github.text-match+json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{urlApiGitHub}}users/{{owner}}/repos?sort=updated",
					"host": [
						"{{urlApiGitHub}}users"
					],
					"path": [
						"{{owner}}",
						"repos"
					],
					"query": [
						{
							"key": "sort",
							"value": "updated"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a repository",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is in JSON format\", () => {",
							"    pm.response.to.have.json;",
							"});",
							"",
							"pm.test(\"Content-Type is present\", () => {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Content-Type is 'application/json; charset=utf-8'\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"Response time is less than 3000ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});",
							"",
							"pm.test(\"Response contains correct name for each field\", () => {",
							"    pm.expect(jsonData).to.have.property(\"id\");",
							"    pm.expect(jsonData).to.have.property(\"full_name\");",
							"    pm.expect(jsonData).to.have.property(\"owner\");",
							"    pm.expect(jsonData.owner).to.have.property(\"login\");",
							"    pm.expect(jsonData.owner).to.have.property(\"id\");",
							"});",
							"",
							"pm.test(\"Response contains correct types of data for each field\", () => {",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"    pm.expect(jsonData.id).to.be.a(\"number\");",
							"    pm.expect(jsonData.full_name).to.be.a(\"string\");",
							"    pm.expect(jsonData.owner).to.be.an(\"object\");",
							"    pm.expect(jsonData.owner.login).to.be.a(\"string\");",
							"    pm.expect(jsonData.owner.id).to.be.a(\"number\");",
							"});",
							"",
							"pm.test(\"Request payload contains the correct data\", () => {",
							"    let actualRequest = JSON.parse(pm.request.body.raw);",
							"",
							"    let expectedRequest = {",
							"        \"name\": pm.collectionVariables.get(\"repo\"),",
							"        \"description\": \"Updated - This repository contains API tests for basic CRUD operations on repositories, using the GitHub API in Postman.\",",
							"        \"homepage\": \"https://github.com\",",
							"        \"private\": false,",
							"        \"has_issues\": true,",
							"        \"has_projects\": true,",
							"        \"has_wiki\": true",
							"    };",
							"",
							"    pm.expect(actualRequest.name).to.eql(expectedRequest.name);",
							"    pm.expect(actualRequest.description).to.eql(expectedRequest.description);",
							"    pm.expect(actualRequest.homepage).to.eql(expectedRequest.homepage);",
							"    pm.expect(actualRequest.private).to.eql(expectedRequest.private);",
							"    pm.expect(actualRequest.has_issues).to.eql(expectedRequest.has_issues);",
							"    pm.expect(actualRequest.has_projects).to.eql(expectedRequest.has_projects);",
							"    pm.expect(actualRequest.has_wiki).to.eql(expectedRequest.has_wiki);",
							"",
							"});",
							"",
							"pm.test(\"Response contains the correct value for each field\", () => {",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"id\"));",
							"    pm.expect(jsonData.full_name).to.eql(pm.collectionVariables.get(\"full_name\"));",
							"    pm.expect(jsonData.owner.login).to.eql(pm.collectionVariables.get(\"owner\"));",
							"    pm.expect(jsonData.owner.id).to.eql(pm.collectionVariables.get(\"owner_id\"));  ",
							"});",
							"",
							"pm.test(\"API returns the correct version\", () => {",
							"    // console.log(pm.response.headers.toObject());",
							"    let apiVersion = pm.response.headers.get(\"x-github-api-version-selected\");",
							"    let expectedVersion = \"2022-11-28\"; ",
							"    pm.expect(apiVersion).to.eql(expectedVersion);",
							"});",
							"",
							"// pm.test(\"Verify '_octo' cookie exists\", () => {",
							"//     let cookieOcto = pm.cookies.get(\"_octo\")",
							"//     pm.expect(cookieOcto).to.not.be.undefined;",
							"//     pm.expect(cookieOcto).to.eql(\"GH1.1.1625141523.1734076530\");",
							"// });",
							"",
							"pm.test(\"Verify 'logged_in' cookie exists\", () => {",
							"    let cookieOcto = pm.cookies.get(\"logged_in\")",
							"    pm.expect(cookieOcto).to.not.be.undefined;",
							"    pm.expect(cookieOcto).to.eql(\"no\");",
							"});",
							"",
							"pm.test(\"Verify PATCH request method\", () => {",
							"    let method = pm.request.method;",
							"    pm.expect(method).to.eql(\"PATCH\");",
							"});",
							"",
							"pm.test(\"Verify the base URL\", () => {",
							"    let baseUrl = pm.request.url.toString();",
							"    pm.expect(baseUrl).to.have.string(\"https://api.github.com\");",
							"});",
							"",
							"pm.test(\"Verify request URL\", () => {",
							"    let actualUrl = pm.request.url.toString();",
							"    let expectedUrl = `${pm.collectionVariables.get(\"urlApiGitHub\")}repos/${pm.collectionVariables.get(\"owner\")}/${pm.collectionVariables.get(\"repo\")}`;",
							"    pm.expect(actualUrl).to.eql(expectedUrl);",
							"});",
							"",
							"const jsonSchema = {",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"id\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"node_id\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"full_name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"private\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"owner\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"login\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"id\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"node_id\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"avatar_url\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"gravatar_id\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"url\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"html_url\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"followers_url\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"following_url\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"gists_url\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"starred_url\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"subscriptions_url\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"organizations_url\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"repos_url\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"events_url\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"received_events_url\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"type\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"user_view_type\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"site_admin\": {",
							"          \"type\": \"boolean\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"login\",",
							"        \"id\",",
							"        \"node_id\",",
							"        \"avatar_url\",",
							"        \"gravatar_id\",",
							"        \"url\",",
							"        \"html_url\",",
							"        \"followers_url\",",
							"        \"following_url\",",
							"        \"gists_url\",",
							"        \"starred_url\",",
							"        \"subscriptions_url\",",
							"        \"organizations_url\",",
							"        \"repos_url\",",
							"        \"events_url\",",
							"        \"received_events_url\",",
							"        \"type\",",
							"        \"user_view_type\",",
							"        \"site_admin\"",
							"      ]",
							"    },",
							"    \"html_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"description\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"fork\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"forks_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"keys_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"collaborators_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"teams_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"hooks_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"issue_events_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"events_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"assignees_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"branches_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"tags_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"blobs_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"git_tags_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"git_refs_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"trees_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"statuses_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"languages_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"stargazers_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"contributors_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"subscribers_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"subscription_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"commits_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"git_commits_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"comments_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"issue_comment_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"contents_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"compare_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"merges_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"archive_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"downloads_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"issues_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"pulls_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"milestones_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"notifications_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"labels_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"releases_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"deployments_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"created_at\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"updated_at\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"pushed_at\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"git_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"ssh_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"clone_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"svn_url\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"homepage\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"size\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"stargazers_count\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"watchers_count\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"language\": {",
							"      \"type\": \"null\"",
							"    },",
							"    \"has_issues\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"has_projects\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"has_downloads\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"has_wiki\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"has_pages\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"has_discussions\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"forks_count\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"mirror_url\": {",
							"      \"type\": \"null\"",
							"    },",
							"    \"archived\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"disabled\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"open_issues_count\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"license\": {",
							"      \"type\": \"null\"",
							"    },",
							"    \"allow_forking\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"is_template\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"web_commit_signoff_required\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"topics\": {",
							"      \"type\": \"array\",",
							"      \"items\": {}",
							"    },",
							"    \"visibility\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"forks\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"open_issues\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"watchers\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"default_branch\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"permissions\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"admin\": {",
							"          \"type\": \"boolean\"",
							"        },",
							"        \"maintain\": {",
							"          \"type\": \"boolean\"",
							"        },",
							"        \"push\": {",
							"          \"type\": \"boolean\"",
							"        },",
							"        \"triage\": {",
							"          \"type\": \"boolean\"",
							"        },",
							"        \"pull\": {",
							"          \"type\": \"boolean\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"admin\",",
							"        \"maintain\",",
							"        \"push\",",
							"        \"triage\",",
							"        \"pull\"",
							"      ]",
							"    },",
							"    \"allow_squash_merge\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"allow_merge_commit\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"allow_rebase_merge\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"allow_auto_merge\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"delete_branch_on_merge\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"allow_update_branch\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"use_squash_pr_title_as_default\": {",
							"      \"type\": \"boolean\"",
							"    },",
							"    \"squash_merge_commit_message\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"squash_merge_commit_title\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"merge_commit_message\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"merge_commit_title\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"security_and_analysis\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"secret_scanning\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"status\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"status\"",
							"          ]",
							"        },",
							"        \"secret_scanning_push_protection\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"status\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"status\"",
							"          ]",
							"        },",
							"        \"dependabot_security_updates\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"status\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"status\"",
							"          ]",
							"        },",
							"        \"secret_scanning_non_provider_patterns\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"status\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"status\"",
							"          ]",
							"        },",
							"        \"secret_scanning_validity_checks\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"status\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"status\"",
							"          ]",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"secret_scanning\",",
							"        \"secret_scanning_push_protection\",",
							"        \"dependabot_security_updates\",",
							"        \"secret_scanning_non_provider_patterns\",",
							"        \"secret_scanning_validity_checks\"",
							"      ]",
							"    },",
							"    \"network_count\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"subscribers_count\": {",
							"      \"type\": \"integer\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"id\",",
							"    \"node_id\",",
							"    \"name\",",
							"    \"full_name\",",
							"    \"private\",",
							"    \"owner\",",
							"    \"html_url\",",
							"    \"description\",",
							"    \"fork\",",
							"    \"url\",",
							"    \"forks_url\",",
							"    \"keys_url\",",
							"    \"collaborators_url\",",
							"    \"teams_url\",",
							"    \"hooks_url\",",
							"    \"issue_events_url\",",
							"    \"events_url\",",
							"    \"assignees_url\",",
							"    \"branches_url\",",
							"    \"tags_url\",",
							"    \"blobs_url\",",
							"    \"git_tags_url\",",
							"    \"git_refs_url\",",
							"    \"trees_url\",",
							"    \"statuses_url\",",
							"    \"languages_url\",",
							"    \"stargazers_url\",",
							"    \"contributors_url\",",
							"    \"subscribers_url\",",
							"    \"subscription_url\",",
							"    \"commits_url\",",
							"    \"git_commits_url\",",
							"    \"comments_url\",",
							"    \"issue_comment_url\",",
							"    \"contents_url\",",
							"    \"compare_url\",",
							"    \"merges_url\",",
							"    \"archive_url\",",
							"    \"downloads_url\",",
							"    \"issues_url\",",
							"    \"pulls_url\",",
							"    \"milestones_url\",",
							"    \"notifications_url\",",
							"    \"labels_url\",",
							"    \"releases_url\",",
							"    \"deployments_url\",",
							"    \"created_at\",",
							"    \"updated_at\",",
							"    \"pushed_at\",",
							"    \"git_url\",",
							"    \"ssh_url\",",
							"    \"clone_url\",",
							"    \"svn_url\",",
							"    \"homepage\",",
							"    \"size\",",
							"    \"stargazers_count\",",
							"    \"watchers_count\",",
							"    \"language\",",
							"    \"has_issues\",",
							"    \"has_projects\",",
							"    \"has_downloads\",",
							"    \"has_wiki\",",
							"    \"has_pages\",",
							"    \"has_discussions\",",
							"    \"forks_count\",",
							"    \"mirror_url\",",
							"    \"archived\",",
							"    \"disabled\",",
							"    \"open_issues_count\",",
							"    \"license\",",
							"    \"allow_forking\",",
							"    \"is_template\",",
							"    \"web_commit_signoff_required\",",
							"    \"topics\",",
							"    \"visibility\",",
							"    \"forks\",",
							"    \"open_issues\",",
							"    \"watchers\",",
							"    \"default_branch\",",
							"    \"permissions\",",
							"    \"allow_squash_merge\",",
							"    \"allow_merge_commit\",",
							"    \"allow_rebase_merge\",",
							"    \"allow_auto_merge\",",
							"    \"delete_branch_on_merge\",",
							"    \"allow_update_branch\",",
							"    \"use_squash_pr_title_as_default\",",
							"    \"squash_merge_commit_message\",",
							"    \"squash_merge_commit_title\",",
							"    \"merge_commit_message\",",
							"    \"merge_commit_title\",",
							"    \"security_and_analysis\",",
							"    \"network_count\",",
							"    \"subscribers_count\"",
							"  ]",
							"};",
							"",
							"pm.test(\"Schema is valid\", () => {",
							"    pm.expect(tv4.validate(jsonData, jsonSchema)).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "X-GitHub-Api-Version",
						"value": "2022-11-28",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/vnd.github.text-match+json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{repoName}}\",\n    \"description\": \"Updated - This repository contains API tests for basic CRUD operations on repositories, using the GitHub API in Postman.\",\n    \"homepage\": \"https://github.com\",\n    \"private\": false,\n    \"has_issues\": true,\n    \"has_projects\": true,\n    \"has_wiki\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlApiGitHub}}repos/{{owner}}/{{repo}}",
					"host": [
						"{{urlApiGitHub}}repos"
					],
					"path": [
						"{{owner}}",
						"{{repo}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create or update file contents",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 201 Created\", () => {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response is in JSON format\", () => {",
							"    pm.response.to.have.json;",
							"});",
							"",
							"pm.test(\"Content-Type is present\", () => {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Content-Type is 'application/json; charset=utf-8'\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"Response time is less than 3000ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});",
							"",
							"pm.test(\"Response contains correct name for each field\", () => {",
							"    pm.expect(jsonData).to.have.property(\"content\");",
							"    pm.expect(jsonData.content).to.have.property(\"name\");",
							"    pm.expect(jsonData.content).to.have.property(\"path\");",
							"    pm.expect(jsonData.content).to.have.property(\"sha\");",
							"});",
							"",
							"pm.test(\"Response contains correct types of data for each field\", () => {",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"    pm.expect(jsonData.content.name).to.be.a(\"string\");",
							"    pm.expect(jsonData.content.path).to.be.a(\"string\");",
							"    pm.expect(jsonData.content.sha).to.be.a(\"string\");",
							"});",
							"",
							"// create variables",
							"pm.collectionVariables.set(\"content_name\", jsonData.content.name);",
							"pm.collectionVariables.set(\"content_path\", jsonData.content.path);",
							"pm.collectionVariables.set(\"content_sha\", jsonData.content.sha);",
							"pm.collectionVariables.set(\"content_size\", jsonData.content.size);",
							"pm.collectionVariables.set(\"content_url\", jsonData.content.url);",
							"pm.collectionVariables.set(\"commit_message\", jsonData.commit.message);",
							"pm.collectionVariables.set(\"committer_name\", jsonData.commit.committer.name);",
							"pm.collectionVariables.set(\"committer_email\", jsonData.commit.committer.email);",
							"",
							"pm.test(\"Request payload contains the correct data\", () => {",
							"    let actualRequest = JSON.parse(pm.request.body.raw);",
							"",
							"    let expectedRequest = {",
							"    \"message\": \"Add READ.md\",",
							"    \"committer\": {",
							"        \"name\": pm.collectionVariables.get(\"committer_name\"),",
							"        \"email\": pm.collectionVariables.get(\"committer_email\")",
							"    },",
							"    \"content\": \"VGhpcyBmaWxlIGhhcyBiZWVuIGFkZGVkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHku\"",
							"};",
							"",
							"    pm.expect(actualRequest.message).to.eql(expectedRequest.message);",
							"    pm.expect(actualRequest.committer.name).to.eql(expectedRequest.committer.name);",
							"    pm.expect(actualRequest.committer.email).to.eql(expectedRequest.committer.email);",
							"",
							"});",
							"",
							"pm.test(\"Response contains the correct value for each field\", () => {",
							"    pm.expect(jsonData.commit.message).to.eql(pm.collectionVariables.get(\"commit_message\"));",
							"    pm.expect(jsonData.commit.committer.name).to.eql(pm.collectionVariables.get(\"committer_name\"));",
							"    pm.expect(jsonData.commit.committer.email).to.eql(pm.collectionVariables.get(\"committer_email\"));",
							"});",
							"",
							"pm.test(\"API returns the correct version\", () => {",
							"    // console.log(pm.response.headers.toObject());",
							"    let apiVersion = pm.response.headers.get(\"x-github-api-version-selected\");",
							"    let expectedVersion = \"2022-11-28\"; ",
							"    pm.expect(apiVersion).to.eql(expectedVersion);",
							"});",
							"",
							"// pm.test(\"Verify '_octo' cookie exists\", () => {",
							"//     let cookieOcto = pm.cookies.get(\"_octo\")",
							"//     pm.expect(cookieOcto).to.not.be.undefined;",
							"//     pm.expect(cookieOcto).to.eql(\"GH1.1.1625141523.1734076530\");",
							"// });",
							"",
							"pm.test(\"Verify 'logged_in' cookie exists\", () => {",
							"    let cookieOcto = pm.cookies.get(\"logged_in\")",
							"    pm.expect(cookieOcto).to.not.be.undefined;",
							"    pm.expect(cookieOcto).to.eql(\"no\");",
							"});",
							"",
							"pm.test(\"Verify PUT request method\", () => {",
							"    let method = pm.request.method;",
							"    pm.expect(method).to.eql(\"PUT\");",
							"});",
							"",
							"pm.test(\"Verify the base URL\", () => {",
							"    let baseUrl = pm.request.url.toString();",
							"    pm.expect(baseUrl).to.have.string(\"https://api.github.com\");",
							"});",
							"",
							"pm.test(\"Verify request URL\", () => {",
							"    let actualUrl = pm.request.url.toString();",
							"    let expectedUrl = `${pm.collectionVariables.get(\"urlApiGitHub\")}repos/${pm.collectionVariables.get(\"owner\")}/${pm.collectionVariables.get(\"repo\")}/contents/READ.md`;",
							"    pm.expect(actualUrl).to.eql(expectedUrl);",
							"});",
							"",
							"const jsonSchema = {",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"content\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"name\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"path\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"sha\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"size\": {",
							"          \"type\": \"integer\"",
							"        },",
							"        \"url\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"html_url\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"git_url\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"download_url\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"type\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"_links\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"self\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"git\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"html\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"self\",",
							"            \"git\",",
							"            \"html\"",
							"          ]",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"name\",",
							"        \"path\",",
							"        \"sha\",",
							"        \"size\",",
							"        \"url\",",
							"        \"html_url\",",
							"        \"git_url\",",
							"        \"download_url\",",
							"        \"type\",",
							"        \"_links\"",
							"      ]",
							"    },",
							"    \"commit\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"sha\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"node_id\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"url\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"html_url\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"author\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"name\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"email\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"date\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"name\",",
							"            \"email\",",
							"            \"date\"",
							"          ]",
							"        },",
							"        \"committer\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"name\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"email\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"date\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"name\",",
							"            \"email\",",
							"            \"date\"",
							"          ]",
							"        },",
							"        \"tree\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"sha\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"url\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"sha\",",
							"            \"url\"",
							"          ]",
							"        },",
							"        \"message\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"parents\": {",
							"          \"type\": \"array\",",
							"          \"items\": {}",
							"        },",
							"        \"verification\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"verified\": {",
							"              \"type\": \"boolean\"",
							"            },",
							"            \"reason\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"signature\": {",
							"              \"type\": \"null\"",
							"            },",
							"            \"payload\": {",
							"              \"type\": \"null\"",
							"            },",
							"            \"verified_at\": {",
							"              \"type\": \"null\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"verified\",",
							"            \"reason\",",
							"            \"signature\",",
							"            \"payload\",",
							"            \"verified_at\"",
							"          ]",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"sha\",",
							"        \"node_id\",",
							"        \"url\",",
							"        \"html_url\",",
							"        \"author\",",
							"        \"committer\",",
							"        \"tree\",",
							"        \"message\",",
							"        \"parents\",",
							"        \"verification\"",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"content\",",
							"    \"commit\"",
							"  ]",
							"};",
							"",
							"pm.test(\"Schema is valid\", () => {",
							"    pm.expect(tv4.validate(jsonData, jsonSchema)).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "X-GitHub-Api-Version",
						"value": "2022-11-28",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/vnd.github.text-match+json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"message\": \"Add READ.md\",\n    \"committer\": {\n        \"name\": \"Ana Shuhada Azimi\",\n        \"email\": \"anashuhadaazimi@gmail.com\"\n    },\n    \"content\": \"VGhpcyBmaWxlIGhhcyBiZWVuIGFkZGVkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHku\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlApiGitHub}}repos/{{owner}}/{{repo}}/contents/READ.md",
					"host": [
						"{{urlApiGitHub}}repos"
					],
					"path": [
						"{{owner}}",
						"{{repo}}",
						"contents",
						"READ.md"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get repository content",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is in JSON format\", () => {",
							"    pm.response.to.have.json;",
							"});",
							"",
							"pm.test(\"Content-Type is present\", () => {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Content-Type is 'application/json; charset=utf-8'\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"Response time is less than 3000ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});",
							"",
							"pm.test(\"Response contains correct name for each field\", () => {",
							"    jsonData.forEach((field) => {",
							"        pm.expect(field).to.have.property(\"name\");",
							"        pm.expect(field).to.have.property(\"path\");",
							"        pm.expect(field).to.have.property(\"sha\");",
							"        pm.expect(field).to.have.property(\"size\");",
							"        pm.expect(field).to.have.property(\"url\");",
							"    })   ",
							"});",
							"",
							"pm.test(\"Response contains correct types of data for each field\", () => {",
							"    pm.expect(jsonData).to.be.an(\"array\");",
							"",
							"    jsonData.forEach((field) => {",
							"        pm.expect(field.name).to.be.a(\"string\");",
							"        pm.expect(field.path).to.be.a(\"string\");",
							"        pm.expect(field.sha).to.be.a(\"string\");",
							"        pm.expect(field.size).to.be.a(\"number\");",
							"        pm.expect(field.url).to.be.a(\"string\");",
							"    });",
							"});",
							"",
							"pm.test(\"Response contains the correct value for each field\", () => {",
							"        jsonData.forEach((field, index) => {",
							"            if(index === 0) {",
							"                pm.expect(field.name).to.eql(pm.collectionVariables.get(\"content_name\"));",
							"                pm.expect(field.path).to.eql(pm.collectionVariables.get(\"content_path\"));",
							"                pm.expect(field.sha).to.eql(pm.collectionVariables.get(\"content_sha\"));",
							"                pm.expect(field.size).to.eql(pm.collectionVariables.get(\"content_size\"));",
							"                pm.expect(field.url).to.eql(pm.collectionVariables.get(\"content_url\"));",
							"            }",
							"        });    ",
							"});",
							"",
							"// pm.test(\"Verify '_octo' cookie exists\", () => {",
							"//     let cookieOcto = pm.cookies.get(\"_octo\")",
							"//     pm.expect(cookieOcto).to.not.be.undefined;",
							"//     pm.expect(cookieOcto).to.eql(\"GH1.1.1625141523.1734076530\");",
							"// });",
							"",
							"pm.test(\"Verify 'logged_in' cookie exists\", () => {",
							"    let cookieOcto = pm.cookies.get(\"logged_in\")",
							"    pm.expect(cookieOcto).to.not.be.undefined;",
							"    pm.expect(cookieOcto).to.eql(\"no\");",
							"});",
							"",
							"pm.test(\"Verify GET request method\", () => {",
							"    let method = pm.request.method;",
							"    pm.expect(method).to.eql(\"GET\");",
							"});",
							"",
							"pm.test(\"API returns the correct version\", () => {",
							"    // console.log(pm.response.headers.toObject());",
							"    let apiVersion = pm.response.headers.get(\"x-github-api-version-selected\");",
							"    let expectedVersion = \"2022-11-28\"; ",
							"    pm.expect(apiVersion).to.eql(expectedVersion);",
							"});",
							"",
							"pm.test(\"Verify the base URL\", () => {",
							"    let baseUrl = pm.request.url.toString();",
							"    pm.expect(baseUrl).to.have.string(\"https://api.github.com\");",
							"});",
							"",
							"pm.test(\"Verify request URL\", () => {",
							"    let actualUrl = pm.request.url.toString();",
							"    let expectedUrl = `${pm.collectionVariables.get(\"urlApiGitHub\")}repos/${pm.collectionVariables.get(\"owner\")}/${pm.collectionVariables.get(\"repo\")}/contents`;",
							"    pm.expect(actualUrl).to.eql(expectedUrl);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "X-GitHub-Api-Version",
						"value": "2022-11-28",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/vnd.github.text-match+json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{urlApiGitHub}}repos/{{owner}}/{{repo}}/contents",
					"host": [
						"{{urlApiGitHub}}repos"
					],
					"path": [
						"{{owner}}",
						"{{repo}}",
						"contents"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a content",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is in JSON format\", () => {",
							"    pm.response.to.have.json;",
							"});",
							"",
							"pm.test(\"Content-Type is present\", () => {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Content-Type is 'application/json; charset=utf-8'\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"Response time is less than 3000ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});",
							"",
							"pm.test(\"Response contains correct name for each field\", () => {",
							"    pm.expect(jsonData).to.have.property(\"name\");",
							"    pm.expect(jsonData).to.have.property(\"path\");",
							"    pm.expect(jsonData).to.have.property(\"sha\");",
							"    pm.expect(jsonData).to.have.property(\"size\");",
							"    pm.expect(jsonData).to.have.property(\"url\");",
							"});",
							"",
							"pm.test(\"Response contains correct types of data for each field\", () => {",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"    pm.expect(jsonData.name).to.be.a(\"string\");",
							"    pm.expect(jsonData.path).to.be.a(\"string\");",
							"    pm.expect(jsonData.sha).to.be.a(\"string\");",
							"    pm.expect(jsonData.size).to.be.a(\"number\");",
							"    pm.expect(jsonData.url).to.be.a(\"string\");",
							"});",
							"",
							"pm.test(\"Response contains the correct value for each field\", () => {",
							"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"content_name\"));",
							"    pm.expect(jsonData.path).to.eql(pm.collectionVariables.get(\"content_path\"));",
							"    pm.expect(jsonData.sha).to.eql(pm.collectionVariables.get(\"content_sha\"));",
							"    pm.expect(jsonData.size).to.eql(pm.collectionVariables.get(\"content_size\"));",
							"    pm.expect(jsonData.url).to.eql(pm.collectionVariables.get(\"content_url\"));",
							"});",
							"",
							"// pm.test(\"Verify '_octo' cookie exists\", () => {",
							"//     let cookieOcto = pm.cookies.get(\"_octo\")",
							"//     pm.expect(cookieOcto).to.not.be.undefined;",
							"//     pm.expect(cookieOcto).to.eql(\"GH1.1.1625141523.1734076530\");",
							"// });",
							"",
							"pm.test(\"Verify 'logged_in' cookie exists\", () => {",
							"    let cookieOcto = pm.cookies.get(\"logged_in\")",
							"    pm.expect(cookieOcto).to.not.be.undefined;",
							"    pm.expect(cookieOcto).to.eql(\"no\");",
							"});",
							"",
							"pm.test(\"Verify GET request method\", () => {",
							"    let method = pm.request.method;",
							"    pm.expect(method).to.eql(\"GET\");",
							"});",
							"",
							"pm.test(\"API returns the correct version\", () => {",
							"    // console.log(pm.response.headers.toObject());",
							"    let apiVersion = pm.response.headers.get(\"x-github-api-version-selected\");",
							"    let expectedVersion = \"2022-11-28\"; ",
							"    pm.expect(apiVersion).to.eql(expectedVersion);",
							"});",
							"",
							"pm.test(\"Verify the base URL\", () => {",
							"    let baseUrl = pm.request.url.toString();",
							"    pm.expect(baseUrl).to.have.string(\"https://api.github.com\");",
							"});",
							"",
							"pm.test(\"Verify request URL\", () => {",
							"    let actualUrl = pm.request.url.toString();",
							"    let expectedUrl = `${pm.collectionVariables.get(\"urlApiGitHub\")}repos/${pm.collectionVariables.get(\"owner\")}/${pm.collectionVariables.get(\"repo\")}/contents/${pm.collectionVariables.get(\"content_path\")}`;",
							"    pm.expect(actualUrl).to.eql(expectedUrl);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "X-GitHub-Api-Version",
						"value": "2022-11-28",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/vnd.github.text-match+json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{urlApiGitHub}}repos/{{owner}}/{{repo}}/contents/{{content_path}}",
					"host": [
						"{{urlApiGitHub}}repos"
					],
					"path": [
						"{{owner}}",
						"{{repo}}",
						"contents",
						"{{content_path}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a content or file",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is in JSON format\", () => {",
							"    pm.response.to.have.json;",
							"});",
							"",
							"pm.test(\"Content-Type is present\", () => {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Content-Type is 'application/json; charset=utf-8'\", () => {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"Response time is less than 3000ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});",
							"",
							"pm.test(\"Response contains correct name for each field\", () => {",
							"    pm.expect(jsonData).to.have.property(\"commit\");",
							"    pm.expect(jsonData.commit).to.have.property(\"committer\");",
							"    pm.expect(jsonData.commit.committer).to.have.property(\"name\");",
							"    pm.expect(jsonData.commit.committer).to.have.property(\"email\");",
							"    pm.expect(jsonData.commit.committer).to.have.property(\"date\");",
							"    pm.expect(jsonData.commit).to.have.property(\"message\");",
							"});",
							"",
							"pm.collectionVariables.set(\"remove_date_message\", jsonData.commit.committer.date);",
							"pm.collectionVariables.set(\"remove_message\", jsonData.commit.message);",
							"",
							"pm.test(\"Response contains correct types of data for each field\", () => {",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"    pm.expect(jsonData.commit.committer.name).to.be.a(\"string\");",
							"    pm.expect(jsonData.commit.committer.email).to.be.a(\"string\");",
							"    pm.expect(jsonData.commit.committer.date).to.be.a(\"string\");",
							"    pm.expect(jsonData.commit.message).to.be.a(\"string\");",
							"});",
							"",
							"pm.test(\"Response contains the correct value for each field\", () => {",
							"    pm.expect(jsonData.commit.committer.name).to.eql(pm.collectionVariables.get(\"committer_name\"));",
							"    pm.expect(jsonData.commit.committer.email).to.eql(pm.collectionVariables.get(\"committer_email\"));",
							"    pm.expect(jsonData.commit.committer.date).to.eql(pm.collectionVariables.get(\"remove_date_message\"));",
							"    pm.expect(jsonData.commit.message).to.eql(pm.collectionVariables.get(\"remove_message\"));",
							"});",
							"",
							"// pm.test(\"Verify '_octo' cookie exists\", () => {",
							"//     let cookieOcto = pm.cookies.get(\"_octo\")",
							"//     pm.expect(cookieOcto).to.not.be.undefined;",
							"//     pm.expect(cookieOcto).to.eql(\"GH1.1.1625141523.1734076530\");",
							"// });",
							"",
							"pm.test(\"Verify 'logged_in' cookie exists\", () => {",
							"    let cookieOcto = pm.cookies.get(\"logged_in\")",
							"    pm.expect(cookieOcto).to.not.be.undefined;",
							"    pm.expect(cookieOcto).to.eql(\"no\");",
							"});",
							"",
							"pm.test(\"Verify DELETE request method\", () => {",
							"    let method = pm.request.method;",
							"    pm.expect(method).to.eql(\"DELETE\");",
							"});",
							"",
							"pm.test(\"API returns the correct version\", () => {",
							"    // console.log(pm.response.headers.toObject());",
							"    let apiVersion = pm.response.headers.get(\"x-github-api-version-selected\");",
							"    let expectedVersion = \"2022-11-28\"; ",
							"    pm.expect(apiVersion).to.eql(expectedVersion);",
							"});",
							"",
							"pm.test(\"Verify the base URL\", () => {",
							"    let baseUrl = pm.request.url.toString();",
							"    pm.expect(baseUrl).to.have.string(\"https://api.github.com\");",
							"});",
							"",
							"pm.test(\"Verify request URL\", () => {",
							"    let actualUrl = pm.request.url.toString();",
							"    let expectedUrl = `${pm.collectionVariables.get(\"urlApiGitHub\")}repos/${pm.collectionVariables.get(\"owner\")}/${pm.collectionVariables.get(\"repo\")}/contents/${pm.collectionVariables.get(\"content_path\")}`;",
							"    pm.expect(actualUrl).to.eql(expectedUrl);",
							"});",
							"",
							"const jsonSchema = {",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"content\": {",
							"      \"type\": \"null\"",
							"    },",
							"    \"commit\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"sha\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"node_id\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"url\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"html_url\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"author\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"name\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"email\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"date\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"name\",",
							"            \"email\",",
							"            \"date\"",
							"          ]",
							"        },",
							"        \"committer\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"name\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"email\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"date\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"name\",",
							"            \"email\",",
							"            \"date\"",
							"          ]",
							"        },",
							"        \"tree\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"sha\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"url\": {",
							"              \"type\": \"string\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"sha\",",
							"            \"url\"",
							"          ]",
							"        },",
							"        \"message\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"parents\": {",
							"          \"type\": \"array\",",
							"          \"items\": [",
							"            {",
							"              \"type\": \"object\",",
							"              \"properties\": {",
							"                \"sha\": {",
							"                  \"type\": \"string\"",
							"                },",
							"                \"url\": {",
							"                  \"type\": \"string\"",
							"                },",
							"                \"html_url\": {",
							"                  \"type\": \"string\"",
							"                }",
							"              },",
							"              \"required\": [",
							"                \"sha\",",
							"                \"url\",",
							"                \"html_url\"",
							"              ]",
							"            }",
							"          ]",
							"        },",
							"        \"verification\": {",
							"          \"type\": \"object\",",
							"          \"properties\": {",
							"            \"verified\": {",
							"              \"type\": \"boolean\"",
							"            },",
							"            \"reason\": {",
							"              \"type\": \"string\"",
							"            },",
							"            \"signature\": {",
							"              \"type\": \"null\"",
							"            },",
							"            \"payload\": {",
							"              \"type\": \"null\"",
							"            },",
							"            \"verified_at\": {",
							"              \"type\": \"null\"",
							"            }",
							"          },",
							"          \"required\": [",
							"            \"verified\",",
							"            \"reason\",",
							"            \"signature\",",
							"            \"payload\",",
							"            \"verified_at\"",
							"          ]",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"sha\",",
							"        \"node_id\",",
							"        \"url\",",
							"        \"html_url\",",
							"        \"author\",",
							"        \"committer\",",
							"        \"tree\",",
							"        \"message\",",
							"        \"parents\",",
							"        \"verification\"",
							"      ]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"content\",",
							"    \"commit\"",
							"  ]",
							"};",
							"",
							"pm.test(\"Schema is valid\", () => {",
							"    pm.expect(tv4.validate(jsonData, jsonSchema)).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "X-GitHub-Api-Version",
						"value": "2022-11-28",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/vnd.github.text-match+json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"message\": \"README.md removed.\",\n    \"committer\": {\n        \"name\": \"{{committer_name}}\",\n        \"email\": \"{{committer_email}}\"\n    },\n    \"sha\": \"{{content_sha}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlApiGitHub}}repos/{{owner}}/{{repo}}/contents/{{content_path}}",
					"host": [
						"{{urlApiGitHub}}repos"
					],
					"path": [
						"{{owner}}",
						"{{repo}}",
						"contents",
						"{{content_path}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a repository",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.text();",
							"",
							"pm.test(\"Status code is 204 No Content\", () => {",
							"    pm.response.to.have.status(\"No Content\");",
							"});",
							"",
							"pm.test(\"Response body is empty\", () => {",
							"    pm.expect(jsonData).to.be.empty;",
							"});",
							"",
							"pm.test(\"Content-Type is not present for 204 No Content\", () => {",
							"    pm.expect(pm.response.headers.has(\"Content-Type\")).to.be.false;",
							"});",
							"",
							"pm.test(\"Response time is less than 3000ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);",
							"});",
							"",
							"// pm.test(\"Verify '_octo' cookie exists\", () => {",
							"//     let cookieOcto = pm.cookies.get(\"_octo\")",
							"//     pm.expect(cookieOcto).to.not.be.undefined;",
							"//     pm.expect(cookieOcto).to.eql(\"GH1.1.1625141523.1734076530\");",
							"// });",
							"",
							"pm.test(\"Verify 'logged_in' cookie exists\", () => {",
							"    let cookieOcto = pm.cookies.get(\"logged_in\")",
							"    pm.expect(cookieOcto).to.not.be.undefined;",
							"    pm.expect(cookieOcto).to.eql(\"no\");",
							"});",
							"",
							"pm.test(\"Verify DELETE request method\", () => {",
							"    let method = pm.request.method;",
							"    pm.expect(method).to.eql(\"DELETE\");",
							"});",
							"",
							"pm.test(\"API returns the correct version\", () => {",
							"    // console.log(pm.response.headers.toObject());",
							"    let apiVersion = pm.response.headers.get(\"x-github-api-version-selected\");",
							"    let expectedVersion = \"2022-11-28\"; ",
							"    pm.expect(apiVersion).to.eql(expectedVersion);",
							"});",
							"",
							"pm.test(\"Verify the base URL\", () => {",
							"    let baseUrl = pm.request.url.toString();",
							"    pm.expect(baseUrl).to.have.string(\"https://api.github.com\");",
							"});",
							"",
							"pm.test(\"Verify request URL\", () => {",
							"    let actualUrl = pm.request.url.toString();",
							"    let expectedUrl = `${pm.collectionVariables.get(\"urlApiGitHub\")}repos/${pm.collectionVariables.get(\"owner\")}/${pm.collectionVariables.get(\"repo\")}`;",
							"    pm.expect(actualUrl).to.eql(expectedUrl);",
							"});",
							"",
							"// remove all collection variables created",
							"pm.collectionVariables.unset(\"repo\");",
							"pm.collectionVariables.unset(\"id\");",
							"pm.collectionVariables.unset(\"full_name\");",
							"pm.collectionVariables.unset(\"owner\");",
							"pm.collectionVariables.unset(\"owner_id\");",
							"pm.collectionVariables.unset(\"content_name\");",
							"pm.collectionVariables.unset(\"content_path\");",
							"pm.collectionVariables.unset(\"content_sha\");",
							"pm.collectionVariables.unset(\"content_size\");",
							"pm.collectionVariables.unset(\"content_url\");",
							"pm.collectionVariables.unset(\"commit_message\");",
							"pm.collectionVariables.unset(\"committer_name\");",
							"pm.collectionVariables.unset(\"committer_email\");",
							"pm.collectionVariables.unset(\"remove_date_message\");",
							"pm.collectionVariables.unset(\"remove_message\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					},
					{
						"key": "X-GitHub-Api-Version",
						"value": "2022-11-28",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/vnd.github.text-match+json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlApiGitHub}}repos/{{owner}}/{{repo}}",
					"host": [
						"{{urlApiGitHub}}repos"
					],
					"path": [
						"{{owner}}",
						"{{repo}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "urlGitHub",
			"value": "https://github.com/",
			"type": "string"
		},
		{
			"key": "urlApiGitHub",
			"value": "https://api.github.com/",
			"type": "string"
		}
	]
}